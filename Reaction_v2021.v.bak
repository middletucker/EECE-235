
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Reaction_v2021(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

  // Note: HexS ARE ACTIVE LOW
  
  assign HEX2[7:0] = 8'b01000000; // zero with a decimal point
  
  // set HEX3, HEX4, HEX5 to be blank
  assign HEX3[7:0] = 8'b11111111;
  assign HEX4[7:0] = 8'b11111111;
  assign HEX5[7:0] = 8'b11111111;

  
  // set-up input wires relating to state machine
  wire OnOff = SW[0];
  wire R = ~KEY[1]; // Link push to Key1 (which by default is Logic Low so invert)
  wire FLAG; 
  wire [9:0] LED_N;
  wire [6:0] Digit0, Digit1;
 
  // state machine parameters
  parameter idle = 		2'b00;
  parameter delay = 		2'b01;
  parameter timing = 	2'b10;
  parameter display = 	2'b11;
  
  
  // reg to track state
  reg [1:0] state_reg;
  
  initial begin
	state_reg = idle;
  end
  
  
  // used beyond state machine
  wire clk100Hz;
  wire clk = MAX10_CLK1_50; // on board 50 MHz Clk
  
//=======================================================
  
  // State Machine Code
  
  always @(posedge clk100Hz)
    begin
	   case (state_reg)
			idle: 	if	(OnOff & !R)	state_reg <= delay;
						else					state_reg <= idle;
			
			delay: 	if	(OnOff & FLAG)	state_reg <= timing;
						else 					state_reg <= delay;
			
			timing: 	if (OnOff & R)		state_reg <= display;
						else					state_reg <= timing;
			
			display: if (!OnOff)			state_reg <= idle;
						else					state_reg <= display;
			
			default:				state_reg <= idle;
			
		endcase
	 
	 
	 end

	 
	 // instantiate module for a clock divider to get to 100 Hz
	 ClockDivider100 CLK_MUT(clk, clk100Hz);
	 
	 // instantiate a module called reaction which will figure out what values to set things on our board
	 reaction MUT(clk100Hz, state_reg, FLAG, LED_N, Digit1, Digit0);

	 // update Harwarde
	 assign LEDR = LED_N;
	 assign HEX0[7] = 1; // turns decimal off
	 assign HEX1[7] = 1; // turns decimal off
	 assign HEX0[6:0] = ~Digit0; // accounting for having assumed logic high
	 assign HEX1[6:0] = ~Digit1; 

endmodule
